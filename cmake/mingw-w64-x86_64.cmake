set(CMAKE_SYSTEM_NAME Windows)

IF(DEFINED ENV{USE_32BIT})
    SET(USE_32BITS $ENV{USE_32BIT})
ENDIF()

IF(USE_32BIT)
    SET(TOOLCHAIN_PREFIX i686-w64-mingw32)
    SET(CMAKE_SYSTEM_PROCESSOR i686)
ELSE()
    SET(TOOLCHAIN_PREFIX x86_64-w64-mingw32)
    SET(CMAKE_SYSTEM_PROCESSOR x86_64)
ENDIF()

IF($ENV{TOOLCHAIN_PREFIX})
    SET(TOOLCHAIN_PREFIX $ENV{TOOLCHAIN_PREFIX})
ENDIF()

# cross compilers to use for C, C++ and Fortran
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc)
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++)
set(CMAKE_Fortran_COMPILER ${TOOLCHAIN_PREFIX}-gfortran)
set(CMAKE_RC_COMPILER ${TOOLCHAIN_PREFIX}-windres)

IF(DEFINED ENV{STAGE})
    SET(STAGE $ENV{STAGE})
ELSE()
    SET(STAGE ${CMAKE_SOURCE_DIR}/stage)
ENDIF()

# target environment on the build host system
IF(DEFINED ENV{CMAKE_FIND_ROOT_PATH})
    SET(CMAKE_FIND_ROOT_PATH $ENV{CMAKE_FIND_ROOT_PATH})
ELSE()
    EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} --print-sysroot OUTPUT_VARIABLE SYSROOT)
    SET(CMAKE_FIND_ROOT_PATH ${SYSROOT})
    LIST(APPEND CMAKE_FIND_ROOT_PATH ${STAGE})
ENDIF()

set(OPENSSL_ROOT_DIR ${STAGE})
set(ZLIB_ROOT ${STAGE})

# modify default behavior of FIND_XXX() commands
# never search programs in the host environment
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# only search headers and libraries in the target environment
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_CROSS_COMPILING TRUE)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static -Os -s")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static -Os -s")

set(CMAKE_SUPPRESS_DEVELOPER_WARNINGS TRUE CACHE INTERNAL "Suppress CMP0048 warning" FORCE)